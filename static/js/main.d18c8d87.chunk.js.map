{"version":3,"sources":["components/Input.jsx","components/Todo.jsx","components/TodoList.jsx","App.jsx","index.js"],"names":["Input","handleAdd","onInputChange","className","type","name","id","placeholder","onChange","onClick","Todo","task","status","handleCheckmark","checked","TodoList","data","length","map","item","App","useState","inputValue","setInputValue","JSON","parse","localStorage","getItem","setData","saveData","setItem","stringify","newTodo","this","Date","getTime","e","target","value","todo","newData","push","parseInt","parentNode","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NASeA,EATD,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,cACvB,OACI,sBAAKC,UAAW,cAAhB,UACI,uBAAOC,KAAK,OAAOC,KAAK,YAAYC,GAAG,YAAYC,YAAY,kBAAkBC,SAAUN,IAC3F,wBAAQC,UAAW,SAAUM,QAASR,EAAtC,0BCOGS,EAXF,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,gBAAiBP,EAAQ,EAARA,GAC1C,OACI,oBAAIH,UAAW,OAAQG,GAAIA,EAA3B,SACI,wBAAOH,UAAW,oBAAlB,cAAyCQ,EACrC,uBAAOP,KAAK,WAAWC,KAAK,YAAYF,UAAW,YAAaW,QAASF,EAAQJ,SAAUK,IAC3F,sBAAMV,UAAW,oBCUlBY,EAbE,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,KAAMH,EAAqB,EAArBA,gBACrB,OACI,sBAAKV,UAAW,iBAAhB,UACI,+CACA,6BACKa,EAAKC,OAASD,EAAKE,KAAI,SAAAC,GACpB,OAAO,cAAC,EAAD,CAAMR,KAAMQ,EAAKR,KAAMC,OAAQO,EAAKP,OAAsBC,gBAAiBA,EAAiBP,GAAIa,EAAKb,IAApDa,EAAKb,OAC5D,wBCoDNc,MAxDf,WAAgB,IAAD,EACuBC,mBAAS,GADhC,mBACNC,EADM,KACMC,EADN,OAEWF,mBAASG,KAAKC,MAAMC,aAAaC,QAAQ,cAFpD,mBAENX,EAFM,KAEAY,EAFA,KAGPC,EAAW,SAACb,GAChBY,EAAQZ,GACRU,aAAaI,QAAQ,WAAYN,KAAKO,UAAUf,KAI7CA,GACHa,EAAS,IAVE,IAaPG,EACJ,WAAarB,EAAMC,GAAS,oBAC1BqB,KAAKtB,KAAOA,EACZsB,KAAKrB,OAASA,EACdqB,KAAK3B,IAAK,IAAI4B,MAAOC,WA0BzB,OACE,sBAAKhC,UAAW,MAAhB,UACE,wBAAQA,UAAW,SAAnB,SACE,yCAEF,uBAAMA,UAAW,OAAjB,UACE,cAAC,EAAD,CAAOD,cAVS,SAACkC,GACrBb,EAAca,EAAEC,OAAOC,QASkBrC,UA3BzB,WAChB,IAAIsC,EAAO,IAAIP,EAAQV,GAAY,GAC/BkB,EAAO,YAAOxB,GAClBwB,EAAQC,KAAKF,GACbV,EAASW,MAwBL,cAAC,EAAD,CAAUxB,KAAMA,EAAMH,gBArBJ,SAACuB,GACvB,IAD6B,EACzBI,EAAO,YAAOxB,GADW,cAEZwB,GAFY,IAE7B,2BAA0B,CAAC,IAAlBrB,EAAiB,QACpBA,EAAKb,KAAOoC,SAASN,EAAEC,OAAOM,WAAWA,WAAWrC,MACtDa,EAAKP,QAAUO,EAAKP,SAJK,8BAO7BiB,EAASW,aCpCbI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d18c8d87.chunk.js","sourcesContent":["const Input = ({handleAdd, onInputChange}) => {\n    return (\n        <div className={\"main__input\"}>\n            <input type=\"text\" name=\"todoInput\" id=\"todoInput\" placeholder=\"Enter task here\" onChange={onInputChange} />\n            <button className={\"addBtn\"} onClick={handleAdd}>Add todo</button>\n        </div>\n    );\n}\n\nexport default Input;","const Todo = ({task, status, handleCheckmark, id}) => {\n    return (\n        <li className={\"todo\"} id={id}>\n            <label className={\"checkboxContainer\"}> {task}\n                <input type=\"checkbox\" name=\"todoCheck\" className={\"todoCheck\"} checked={status} onChange={handleCheckmark} />\n                <span className={\"checkmark\"}></span>\n            </label>\n        </li>\n    );\n}\n\nexport default Todo;","import Todo from './Todo.jsx';\n\nconst TodoList = ({data, handleCheckmark}) => {\n    return (\n        <div className={\"main__todolist\"}>\n            <h3>List of todos</h3>\n            <ul>\n                {data.length ? data.map(item => {\n                    return <Todo task={item.task} status={item.status} key={item.id} handleCheckmark={handleCheckmark} id={item.id} />\n                }) : 'No todos yet...'}\n            </ul>\n        </div>\n    );\n}\n\nexport default TodoList;","import Input from './components/Input.jsx';\nimport TodoList from './components/TodoList.jsx';\nimport { useState } from 'react';\n\n\nfunction App() {\n  const [inputValue, setInputValue] = useState(0);\n  const [data, setData] = useState(JSON.parse(localStorage.getItem('todoList')));\n  const saveData = (data) => {\n    setData(data);\n    localStorage.setItem('todoList', JSON.stringify(data));\n  }\n\n  //Initialization of the localStorage\n  if (!data) {\n    saveData([]);\n  }\n  //Template for new todos\n  class newTodo {\n    constructor (task, status) {\n      this.task = task;\n      this.status = status;\n      this.id = new Date().getTime();\n    }\n  }\n  // HANDLERS\n  // Handling the adding of a new task\n  const handleAdd = () => {\n    let todo = new newTodo(inputValue, false);\n    let newData = [...data];\n    newData.push(todo);\n    saveData(newData);\n  }\n  // Handling the checking of a task\n  const handleCheckmark = (e) => {\n    let newData = [...data];\n    for (let item of newData) {\n      if (item.id === parseInt(e.target.parentNode.parentNode.id)) {\n        item.status = !item.status;\n      }\n    }\n    saveData(newData);\n  }\n  // Updating the state of input when changing the input\n  const onInputChange = (e) => {\n    setInputValue(e.target.value);\n  }\n\n  return (\n    <div className={\"App\"}>\n      <header className={\"header\"}>\n        <h1>todos</h1>\n      </header>\n      <main className={\"main\"}>\n        <Input onInputChange={onInputChange} handleAdd={handleAdd} />\n        <TodoList data={data} handleCheckmark={handleCheckmark} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}